name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-checks:
    name: PR Validation Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Check PR Title Format
      run: |
        echo "PR Title: ${{ github.event.pull_request.title }}"
        # Check if title follows conventional commits or has a clear category
        if [[ "${{ github.event.pull_request.title }}" =~ ^(feat|fix|docs|style|refactor|test|chore|perf|ci)(\(.+\))?:.+ ]]; then
          echo "‚úÖ PR title follows conventional commits"
        else
          echo "‚ö†Ô∏è Consider using conventional commits format: type(scope): description"
        fi

    - name: Check for Breaking Changes
      run: |
        echo "Checking for breaking changes in modified files..."
        git diff --name-only origin/${{ github.base_ref }}...HEAD | tee changed_files.txt
        
        # Check if critical files were modified
        if grep -q "api/cloudkey_gen2_client.py\|core/optimize_network.py\|optimizer.py" changed_files.txt; then
          echo "‚ö†Ô∏è Critical files modified - ensure backward compatibility"
        fi

    - name: Verify No Credentials in Code
      run: |
        echo "Scanning for hardcoded credentials..."
        ! grep -rE "(password|passwd|pwd|token|api_key|secret).*=.*['\"][^'\"]{8,}" . --include="*.py" \
          --exclude-dir=".git" --exclude-dir="__pycache__" --exclude-dir="Archive" \
          && echo "‚úÖ No obvious credentials found" || echo "‚ö†Ô∏è Possible credentials detected"

    - name: Check Modified Files Compile
      run: |
        echo "Compiling modified Python files..."
        git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "\.py$" | while read file; do
          if [ -f "$file" ]; then
            python -m py_compile "$file" && echo "‚úÖ $file" || (echo "‚ùå $file failed" && exit 1)
          fi
        done

    - name: Run Tests on Changed Code
      run: |
        echo "Running tests related to changes..."
        python -m pytest tests/ -v || echo "‚ö†Ô∏è Some tests may require live controller"
      continue-on-error: true

    - name: Check Code Coverage
      run: |
        echo "Checking code coverage for changed files..."
        pip install pytest-cov
        pytest tests/ --cov=core --cov=api --cov-report=term-missing || true
      continue-on-error: true

    - name: Verify Bug Fixes Intact
      run: |
        echo "Verifying October 10 bug fixes remain intact..."
        
        # Check mock data removal
        ! grep -q "Demo AP Uplink" core/switch_analyzer.py && echo "‚úÖ Mock data still removed" || (echo "‚ùå Mock data reintroduced!" && exit 1)
        
        # Check cache implementation
        grep -q "hourly_data_cache" core/switch_analyzer.py && echo "‚úÖ Cache still implemented" || (echo "‚ùå Cache removed!" && exit 1)
        
        # Check execution order
        python -c "
import re
with open('core/advanced_analyzer.py') as f:
    content = f.read()
    history_pos = content.find('analyze_switch_port_history')
    switches_pos = content.find('analyze_switches()')
    if history_pos < switches_pos and history_pos > 0:
        print('‚úÖ Execution order still correct')
    else:
        print('‚ùå Execution order broken!')
        exit(1)
        " || exit 1

    - name: Comment PR Summary
      if: always()
      run: |
        echo "PR validation completed. Check the logs above for details."

  size-check:
    name: PR Size Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check PR Size
      run: |
        CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | wc -l)
        ADDED_LINES=$(git diff --shortstat origin/${{ github.base_ref }}...HEAD | grep -oE '[0-9]+ insertion' | grep -oE '[0-9]+' || echo "0")
        DELETED_LINES=$(git diff --shortstat origin/${{ github.base_ref }}...HEAD | grep -oE '[0-9]+ deletion' | grep -oE '[0-9]+' || echo "0")
        
        echo "üìä PR Statistics:"
        echo "Files changed: $CHANGED_FILES"
        echo "Lines added: $ADDED_LINES"
        echo "Lines deleted: $DELETED_LINES"
        
        if [ "$CHANGED_FILES" -gt 20 ]; then
          echo "‚ö†Ô∏è Large PR - consider breaking into smaller PRs"
        else
          echo "‚úÖ PR size is reasonable"
        fi

  conflict-check:
    name: Merge Conflict Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for Merge Conflicts
      run: |
        git fetch origin ${{ github.base_ref }}
        if git merge-tree $(git merge-base HEAD origin/${{ github.base_ref }}) HEAD origin/${{ github.base_ref }} | grep -q '<<<<<<'; then
          echo "‚ùå Merge conflicts detected!"
          exit 1
        else
          echo "‚úÖ No merge conflicts"
        fi
